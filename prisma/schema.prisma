// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// Roles & Users
// =============================
model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique // "admin", "consultant", "organization"
  displayName String   // "Administrator", "Consultant", "Organization"
  description String?
  createdAt   DateTime @default(now())
  users       User[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roleId    Int      // OBLIGATORIO escoger rol
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    ResetToken[]
  userForms   UserForm[]
  userItems   UserItemScore[]
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// =============================
// Dynamic Forms (templates)
// =============================

model Module {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  forms       Form[]
}

model Form {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  moduleId    Int
  module      Module      @relation(fields: [moduleId], references: [id])
  categories  Category[]
  userForms   UserForm[]  // users that completed this form
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   
  formId      Int
  form        Form     @relation(fields: [formId], references: [id])
  items       Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, formId]) // NAME UNIQUE within a form
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String   
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  userScores  UserItemScore[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, categoryId]) // NAME UNIQUE within a category
}

// =============================
// User Responses
// =============================

model UserForm {
  id          Int      @id @default(autoincrement())
  userId      Int
  formId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  form        Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([userId, formId]) // one form response per user
}

model UserItemScore {
  id          Int      @id @default(autoincrement())
  userId      Int
  itemId      Int
  score       Int?     // initially null, filled when user assigns it
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId]) // one score per user per item
}